;; INIT

;; much of the package management code cribbed from the castlemacs init.el

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)

;; Use 'use-package' to install and config packages
;; This ensures use-package itself is installed and available
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

;; :ensure packages are installed by default for any use-package declaration
(setq use-package-always-ensure t)

;; Pass system shell env to Emacs. Important for shell and org export stuff
(use-package exec-path-from-shell
	     :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; All auto-config generated by customize* actions goes to custom.el
(setq custom-file (concat user-emacs-directory "/custom.el"))
(load-file custom-file)

(add-to-list 'load-path "~/.emacs.d/vendor")

(defun run-server ()
  "Ensure the Emacs server is available for emacsclient command."
  (require 'server)
  (unless (server-running-p)
    (server-start)))
(run-server)

(use-package diminish)
(use-package hydra
  :defer t)

;; MODIFIER KEYS
;; ===

;; I'm good on this for now :)

;; SANE DEFAULTS
;; ===

;; Smoother, nicer scrolling
(setq scroll-margin 10
      scroll-step 1
      next-line-add-newlines nil
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

(setq mouse-wheel-follow-mouse 't)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))

;; Disable auto save and backup files
(setq auto-save-default nil)
(setq make-backup-files nil)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Move file to trash when removing
(setq-default delete-by-moving-to-trash t)

;; Auto-revert files when they change (can cause problems if on or off, gotta pick a way :P)
(global-auto-revert-mode t)

(setq
 inhibit-startup-message t		; Don't show startup message
 inhibit-startup-screen t		; ... or screen
 cursor-in-non-selected-windows t	; Hide cursors in inactive windows
 echo-keystrokes 0.1			; show keystrokes right away
 initial-scratch-message nil		; Empty scratch buffer by default
 sentence-end-double-space nil		; Sentences should end in one space
 confirm-kill-emacs 'y-or-n-p		; y and n options for emacs quiting
 help-window-select t			; select help window immediately so I don't have to switch to it to quit
 )

(fset 'yes-or-no-p 'y-or-n-p)		; y and n instead of yes and no confirmations
(delete-selection-mode 1)		; treat selections like vim selections (delete when new input)

;; delete trailing spaces and ensure a new line at the end of files
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)

(use-package popwin
  :config (popwin-mode 1))

;; VISUALS
;; ===

;; Enable transparent title bar on macOS
(when (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))

;; Disable default added GUI elements
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; Visual guide for key combos
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

;; Highlight current line
(global-hl-line-mode 1)

;; Load nice dark theme
(load-theme 'zenburn)
;; Good themes list
;; doom-spacegrey, labburn, tsdh-light, material-light, gruvbox, badwolf

;; Always wrap lines
(global-visual-line-mode 1)

;; Show matching character pairs
(use-package smartparens
  :diminish
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t)
  (show-smartparens-global-mode t))

;; Hide minor modes from modeline
(use-package rich-minority
  :config
  (rich-minority-mode 1)
  (setf rm-blacklist ""))

;; Show full path in title bar
(setq-default frame-title-format "%b (%f)")

;; Better modeline
(use-package powerline
  :config (powerline-default-theme))

;; More intuitive/repeatable text scaling command
(defhydra hydra-zoom (global-map "C-c z")
  "zoom"
  ("Z" text-scale-increase "larger")
  ("z" text-scale-decrease "smaller"))


;; BASIC NAVIGATION
;; ===

;; Thanks to Bozhidar Batsov
;; http://emacsredux.com/blog/2013/]05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)

;; C-x O counter-clockwise other-window (C-x o)
(defun reverse-other-window ()
  (interactive)
  (other-window -1))

;; Buffer Management
(define-key global-map (kbd "C-x C-b") 'ibuffer)

;; EasyMotion style visual movement
(use-package avy
  :defer t
  :bind ("C-;" . avy-goto-char))

(defhydra hydra-nav (global-map "C-\\")
  "navigation"
  ("o" other-window "next window")
  ("O" reverse-other-window "previous window")
  ("f" other-frame "next frame"))

;; Replacement for built in isearch that works with multiple-cursors
(use-package phi-search
  :bind
  ("C-s" . phi-search)
  ("C-r" . phi-search-backward))

;; Load dired-x, comes with 'F' command (opens all marked files)
;; (load "dired-x")


;; TEXT EDITING
;; ===

;; Expand selection to surrounding text object (quotes, parens, block, paragraph, etc.)
(use-package expand-region
  :bind
  ("C-'" . er/expand-region)
  ("C-\"" . er/contract-region))

(use-package multiple-cursors
  :bind (("C-c ." .'mc/mark-all-like-this)
	 ("C-c S" . 'mc/edit-lines)
	 ("M-<down>" . 'mc/mark-next-like-this)
	 ("M-<up>" . 'mc/mark-previous-like-this)))

;; WINDOW MANAGEMENT
;; ===


;; PROJECT MANAGEMENT
;; ===

;; Project switching and fuzzy file search in project with cmd-P and cmd-p
(use-package projectile
  :defer t
  :diminish projectile-mode
  :config (projectile-mode +1))
(use-package helm-projectile
  :defer t
  :config (helm-projectile-on)
  :bind
  ("s-p" . helm-projectile-find-file)
  ("s-P" . helm-projectile-switch-project))


;; MENUS AND COMPLETION (not code completion)
;; ===

;; remap M-/ to hippie-expand
(global-set-key (kbd "M-/") 'hippie-expand)

;; 25 Most recent files with C-x C-r
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

;; Use helm to replace a lot of default menus
(use-package helm
  :defer t
  :diminish helm-mode
  :config
  (helm-mode 1)
  (setq helm-boring-buffer-regexp-list (list
					(rx "*magit-")
					(rx "*helm")
					(rx "*Echo")
					(rx "*Flycheck")
					(rx "*org-src-font")
					(rx "*Minibuf")
					(rx "magit-process")))
  :bind
  ("C-x b" . helm-buffers-list)
  ("C-x C-f" . helm-find-files)
  ("M-x" . helm-M-x)
  ("C-x C-r" . helm-recentf))


;; VERSION CONTROL WITH GIT
;; ===

;; Show added/changed/removed line indicator in fringe
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config (global-git-gutter-mode +1))

(use-package magit
  :defer t
  :bind ("C-x g" . 'magit-status))


;; TERMINAL
;; ===

;; Make eshell tab completion case insensitive
(setq eshell-cmpl-ignore-case t)


;; CODE COMPLETION
;; ===

;; Use CSS-like syntax to quickly write html
(use-package emmet-mode
  :defer t)

;; Completion engine
(use-package company
  :defer t
  :diminish company-mode)


;; SPELLCHECKING AND THESAURUS
;; ===

;; Spellcheck
;; The built in commands for spell correction are ispell-*
(setq ispell-program-name "aspell")
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
;; Ensure C-; avy-goto-char binding isn't overridden
(with-eval-after-load 'flyspell
  (define-key flyspell-mode-map (kbd "C-;") nil)
  (global-set-key  (kbd "C-;") 'avy-goto-char))


;; PROGRAMMING
;; ===

;; Automatic syntax checking and linting
(use-package flycheck
  :defer t
  :diminish flycheck-mode
  :commands global-flycheck-mode
  :init (add-hook 'prog-mode-hook 'global-flycheck-mode))

;; (use-package lsp-mode
;;   :commands lsp
;;   :config (require 'lsp-clients))

;;(use-package lsp-ui)
;;(use-package company-lsp)

;; Integrate with 'chruby' ruby version management tool
(use-package chruby
  :defer t
  :config (chruby-use "ruby-2.6.3"))

;; Search for string in projects
(use-package helm-ag
  :defer t
  :bind ("s-f" . 'helm-do-ag-project-root))

;; (use-package toml-mode)

(use-package rust-mode
  :defer t
  ;; :hook (rust-mode . lsp)
  :config
  (setq rust-format-on-save t))

(use-package flycheck-rust
  :defer t
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

;; ORG MODE
;; ===

;; Store link binding
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c SPC") nil)
  (define-key org-mode-map (kbd "C-c l") 'org-store-link))


;; Set languages enabled for org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ruby . t)
   (emacs-lisp . t)
   (js . t)))

;; Configure default org directory, and name default org files relative to that
(setq org-directory "~/Dropbox/Org")
(setq org-default-notes-file (concat org-directory "/notes.org"))
(setq org-default-journal-file (concat org-directory "/journal.org"))

;; Org capture binding
(define-key global-map "\C-cc" 'org-capture)

;; For info on how to customize templates:
; check the org-capture-templates var
; (key description target template)
(setq org-capture-templates
      '(("i" "Inbox Item"
	 entry (file+headline org-default-notes-file "Inbox")
         "* TODO %?")
	("c" "Code Todo (prompts for file link description)"
	 entry (file+headline org-default-notes-file "Code TODOs")
	 "* TODO %?\n  %i\n  %A")
	("j" "Journal Entry"
	 entry (file+datetree org-default-journal-file)
	 "* %?")
	("g" "Grocery List"
	 entry (file+headline org-default-notes-file "Groceries")
	 "* TODO Grocery List%?\n | Item | Est. Price |\n|-+-|\n| | |\n| Total w/ tax: | |\n#+TBLFM: @>$2=vsum(@46..@-1)*1.08"
	 )))

;; Let me refile to subtrees
(setq org-refile-targets
      '((org-default-notes-file :maxlevel . 3)))

;; Let me refile with helm
(setq org-outline-path-complete-in-steps nil)

;; org-agenda binding
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-agenda-files
      (list org-default-notes-file))


;; IRC Client
;; ===

(use-package circe
  :defer t
  :config
  (setq circe-network-options
	'(("Freenode"
	   :tls t
	   :nick "username"
	   :sasl-username "username"
	   :sasl-password "password"
	   :channels ("#ruby"))))
  (setq circe-reduce-lurker-spam t) ; Hide JOIN, PART, QUIT messages
  (setq circe-format-say "{nick:-16s} {body}") ; Align messages
  (require 'circe-color-nicks)
  (enable-circe-color-nicks))


;; THE END
;; ===

(provide 'init)
;;; init ends here
