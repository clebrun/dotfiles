source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload
plug "jdugan6240/powerline.kak" config %{
    powerline-start
}
plug "Delapouite/kakoune-buffers"
plug "andreyorst/smarttab.kak"
plug "Vurich/zig-kak"
plug "ul/kak-lsp" do %{
  cargo install --locked --force --path .
}
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(go) %{
  lsp-enable-window
}

colorscheme gruvbox
add-highlighter global/ number-lines -hlcursor
# Highlight 80th column
add-highlighter global/ column 80 default,rgb:303030
addhl global/ wrap

set global ui_options ncurses_assistant=cat ncurses_status_on_top=true

# Indentation settings

set global tabstop 2
set global indentwidth 2

hook -group kakrc global BufSetOption filetype=javascript %{
  set buffer tabstop 2
  set buffer indentwidth 2
  expandtab
}

hook -group kakrc global BufSetOption filetype=ruby %{
  set buffer tabstop 2
  set buffer indentwidth 2
  expandtab
}

# some config from the kak plugin andrusi/zig.kak

define-command -hidden zig-indent-on-new-line %[
    evaluate-commands -draft -itersel %[
        # copy comment prefix //
        try %{ execute-keys -draft k <a-x> s^\h*\K///?\h*<ret> y gh j P }
        # preserve indent
        try %{ execute-keys -draft ';' K <a-&> }
        # filter previous line
        try %{ execute-keys -draft k :zig-filter-around-selections<ret> }
        # indent after lines ending with { or (
        try %[ execute-keys -draft k <a-x> <a-k>[{(]\h*$<ret> j <a-gt> ]
    ]
]

define-command -hidden zig-indent-on-closing-curly-brace %[
    evaluate-commands -draft -itersel %[
        # align to opening brace when the closing brace is the only thing on this line
        try %[ execute-keys -draft <a-h> <a-k>^\h+\}$<ret> h m s\A|.\z<ret> 1<a-&> ]
    ]
]

# Initialization

hook global WinSetOption filetype=zig %[
    set-option buffer comment_line '//'
    # hook -group zig-hooks window ModeChange insert:.* zig-filter-around-selections
    hook -group zig-indent window InsertChar \n zig-indent-on-new-line
    hook -group zig-indent window InsertChar \} zig-indent-on-closing-curly-brace

    # hook -once -always window WinSetOption filetype=.* %{
    #     remove-hooks window zig-.+
    # }
]

hook -group kakrc global BufSetOption filetype=zig %{
  # \t indentation is a compiler error. AndrewMK is truly a man of culture.
  set buffer tabstop 2
  set buffer indentwidth 2
  expandtab
}


# map global user ' ' 'gif[l'                                 -docstring 'try to put cursor in text checkbox [ ]'
map global user ',' ':write<ret>'                           -docstring ':w shortcut'
map global user 'B' ':info-buffers<ret>'                    -docstring 'show buffers'
map global user 'F' ':set buffer filetype '                 -docstring 'shortcut for manual filetype setting'
map global user 'K' ':e ~/.config/kak/kakrc<ret>'           -docstring 'open kakoune config file'
map global user 'b' ':enter-user-mode buffers<ret>'         -docstring 'enter buffers user mode'
map global user 'c' '<a-|>pbcopy<ret>'                      -docstring 'clipboard copy current selection'
map global user 'n' ':new<ret>'                             -docstring 'open new tmux split of kak'
map global user 'p' '|pbpaste<ret>'                         -docstring 'clipboard paste current selection'
map global user 'r' "|ruby -e 's=STDIN.read; si=s.to_i; p " -docstring 'pipe selections to ruby oneliner'
# map global user \' '<a-S>'                                  -docstring 'Alt-S shortcut (cursors at start and end of sel)'

map global user '=' ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>' -docstring 'replace selections with prompted math results against values'

map global normal '#' ':comment-line<ret>' -docstring 'Comment line'
map global normal 'D' ';Gld'               -docstring 'Delete to end of line'
map global normal '<backspace>' ';<space>' -docstring 'reduce selection to just active cursor'

# Anti-mappings
map global user 'h' ':echo "Naughty! Check docstring.'      -docstring 'Obsolete! use <alt+h>'
map global user 'l' ':echo "Naughty! Check docstring.'      -docstring 'Obsolete! use <alt+l>'

# What?
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}
